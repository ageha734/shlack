name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate changelog for (optional)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: shlack
            asset_name: shlack-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: shlack
            asset_name: shlack-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: shlack.exe
            asset_name: shlack-windows-x86_64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: shlack.exe
            asset_name: shlack-windows-aarch64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: shlack
            asset_name: shlack-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: shlack
            asset_name: shlack-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_CC: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
        PKG_CONFIG_ALLOW_CROSS: 1
        OPENSSL_STATIC: 1
        OPENSSL_NO_VENDOR: 0

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate Changelog
        run: |
          # Generate changelog for specified tag or latest
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            git-cliff --tag "${{ github.event.inputs.tag }}" --output CHANGELOG.md
          else
            git-cliff --output CHANGELOG.md
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md"
          git push

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update CHANGELOG.md"
          title: "Update CHANGELOG.md"
          body: |
            ## 📝 CHANGELOG Update

            This PR contains an automatically generated CHANGELOG update.

            ### Changes
            - Automatically updated CHANGELOG.md using git-cliff
            - Reflects latest commit history
            - Follows conventional commit format

            ### Review Checklist
            - [ ] Verify generated CHANGELOG content is correct
            - [ ] Check formatting is appropriate
            - [ ] Ensure links work correctly

            ---
            *This PR was automatically generated by GitHub Actions*
          branch: update-changelog
          delete-branch: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, changelog]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/download-artifact@v4

    - name: Create Release
      if: steps.check_tag.outputs.exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## Changes

          Automated release for version ${{ steps.get_version.outputs.version }}

          ## Downloads

          ### Linux
          - **x86_64**: shlack-linux-x86_64
          - **ARM64**: shlack-linux-aarch64

          ### Windows
          - **x86_64**: shlack-windows-x86_64.exe
          - **ARM64**: shlack-windows-aarch64.exe

          ### macOS
          - **x86_64**: shlack-macos-x86_64
          - **ARM64 (Apple Silicon)**: shlack-macos-aarch64

          ## Installation

          Use the install script for automatic installation:
          ```bash
          curl -fsSL https://raw.githubusercontent.com/ageha734/shlack/master/install.sh | bash
          ```

    - name: Upload Linux Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-linux-x86_64/shlack
        asset_name: shlack-linux-x86_64
        asset_content_type: application/octet-stream

    - name: Upload Windows Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-windows-x86_64.exe/shlack.exe
        asset_name: shlack-windows-x86_64.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-macos-x86_64/shlack
        asset_name: shlack-macos-x86_64
        asset_content_type: application/octet-stream

    - name: Upload Linux ARM64 Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-linux-aarch64/shlack
        asset_name: shlack-linux-aarch64
        asset_content_type: application/octet-stream

    - name: Upload Windows ARM64 Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-windows-aarch64.exe/shlack.exe
        asset_name: shlack-windows-aarch64.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS ARM64 Release Asset
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shlack-macos-aarch64/shlack
        asset_name: shlack-macos-aarch64
        asset_content_type: application/octet-stream
