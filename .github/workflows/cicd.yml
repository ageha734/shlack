name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/cicd.yml'
  pull_request:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/cicd.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --verbose

  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      should_release: ${{ steps.check_tag.outputs.exists == 'false' }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
      - id: check_tag
        run: |
          if git rev-parse "${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [check_version]
    if: needs.check_version.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: shlack-linux-x86_64
            binary_name: shlack-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: shlack-linux-aarch64
            binary_name: shlack-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: shlack-windows-x86_64.exe
            binary_name: shlack-windows-x86_64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: shlack-windows-aarch64.exe
            binary_name: shlack-windows-aarch64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: shlack-macos-x86_64
            binary_name: shlack-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: shlack-macos-aarch64
            binary_name: shlack-macos-aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - if: matrix.target == 'aarch64-unknown-linux-gnu'
        name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
      - if: matrix.target == 'aarch64-unknown-linux-gnu'
        name: Configure linker for aarch64
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
      - name: Build release binary
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  publish_release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [check_version, build]
    if: needs.check_version.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff
      - name: Update and Commit CHANGELOG.md
        run: |
          git-cliff --output CHANGELOG.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for ${{ needs.check_version.outputs.version }} [skip ci]"
          git push
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: release-assets
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_version.outputs.version }}
          body_path: "CHANGELOG.md"
          files: release-assets/*/*
